{
    "docs": [
        {
            "location": "/",
            "text": "python-varlink\n\n\nA \nvarlink\n implementation for Python.\n\n\n\n\nGIT Repository\n\n\nAPI documentation\n\n\n\n\npython varlink installation\n\n\nFrom pypi:\n\n\n$ pip3 install --user varlink\n\n\n\n\nWith Fedora 28/rawhide:\n\n\n$ sudo dnf install python-varlink\n\n\n\n\nvarlink tool installation\n\n\nWith Fedora 28/rawhide:\n\n\n$ sudo dnf install libvarlink-util\n\n\n\n\nor compile from https://github.com/varlink/libvarlink\n\n\nExamples\n\n\nSee the \ntests\n directory.\n\n\n$ PYTHONPATH=$(pwd) python3 ./varlink/tests/test_orgexamplemore.py --varlink=\"unix:@test\" &\n[1] 6434\n$ varlink help unix:@test/org.example.more\n# Example Varlink service\ninterface org.example.more\n\n# Enum, returning either start, progress or end\n# progress: [0-100]\ntype State (\n  start: ?bool,\n  progress: ?int,\n  end: ?bool\n)\n\n# Returns the same string\nmethod Ping(ping: string) -> (pong: string)\n\n# Dummy progress method\n# n: number of progress steps\nmethod TestMore(n: int) -> (state: State)\n\n# Stop serving\nmethod StopServing() -> ()\n\n# Something failed in TestMore\nerror TestMoreError (reason: string)\n\n\n$ fg\nPYTHONPATH=$(pwd) python3 ./varlink/tests/test_orgexamplemore.py --varlink=\"unix:@test\"\n^C\n\n\n\n\n$ PYTHONPATH=$(pwd) python3 ./varlink/tests/test_orgexamplemore.py\nConnecting to exec:./varlink/tests/test_orgexamplemore.py\n\nListening on @0002c\nPing:  Test\n--- Start ---\nProgress: 0\nProgress: 10\nProgress: 20\nProgress: 30\nProgress: 40\nProgress: 50\nProgress: 60\nPing:  Test\nProgress: 70\nPing:  Test\nProgress: 80\nPing:  Test\nProgress: 90\nPing:  Test\nProgress: 100\nPing:  Test\n--- End ---\n\n\n\n\n$ PYTHONPATH=$(pwd) python3 ./varlink/tests/test_orgexamplemore.py --varlink=\"unix:@test\" &\nListening on @test\n[1] 6434\n$ PYTHONPATH=$(pwd) python3 ./varlink/tests/test_orgexamplemore.py --client --varlink=\"unix:@test\"\nConnecting to unix:@test\n\nPing:  Test\n--- Start ---\nProgress: 0\nProgress: 10\nProgress: 20\nProgress: 30\nProgress: 40\nProgress: 50\nProgress: 60\nPing:  Test\nProgress: 70\nPing:  Test\nProgress: 80\nPing:  Test\nProgress: 90\nPing:  Test\nProgress: 100\nPing:  Test\n--- End ---\n$ fg\nPYTHONPATH=$(pwd) python3 ./varlink/tests/test_orgexamplemore.py --varlink=\"unix:@test\"\n^C\n\n\n\n\nYou can also start the clients and server with URLs following the \nvarlink URL standard\n.\nE.g.\n- unix:@anonuds\n- unix:/run/myserver/socketfile\n- tcp:127.0.0.1:12345\n- tcp:[::1]:12345\n\n\nVarlink Certification Server\n\n\n$ PYTHONPATH=$(pwd) python3 ./varlink/tests/test_certification.py --varlink=tcp:127.0.0.1:12345\n\n\n\n\nVarlink Certification Client\n\n\n$ PYTHONPATH=$(pwd) python3 ./varlink/tests/test_certification.py --varlink=tcp:127.0.0.1:12345 --client",
            "title": "Home"
        },
        {
            "location": "/#python-varlink",
            "text": "A  varlink  implementation for Python.   GIT Repository  API documentation",
            "title": "python-varlink"
        },
        {
            "location": "/#python-varlink-installation",
            "text": "From pypi:  $ pip3 install --user varlink  With Fedora 28/rawhide:  $ sudo dnf install python-varlink",
            "title": "python varlink installation"
        },
        {
            "location": "/#varlink-tool-installation",
            "text": "With Fedora 28/rawhide:  $ sudo dnf install libvarlink-util  or compile from https://github.com/varlink/libvarlink",
            "title": "varlink tool installation"
        },
        {
            "location": "/#examples",
            "text": "See the  tests  directory.  $ PYTHONPATH=$(pwd) python3 ./varlink/tests/test_orgexamplemore.py --varlink=\"unix:@test\" &\n[1] 6434\n$ varlink help unix:@test/org.example.more\n# Example Varlink service\ninterface org.example.more\n\n# Enum, returning either start, progress or end\n# progress: [0-100]\ntype State (\n  start: ?bool,\n  progress: ?int,\n  end: ?bool\n)\n\n# Returns the same string\nmethod Ping(ping: string) -> (pong: string)\n\n# Dummy progress method\n# n: number of progress steps\nmethod TestMore(n: int) -> (state: State)\n\n# Stop serving\nmethod StopServing() -> ()\n\n# Something failed in TestMore\nerror TestMoreError (reason: string)\n\n\n$ fg\nPYTHONPATH=$(pwd) python3 ./varlink/tests/test_orgexamplemore.py --varlink=\"unix:@test\"\n^C  $ PYTHONPATH=$(pwd) python3 ./varlink/tests/test_orgexamplemore.py\nConnecting to exec:./varlink/tests/test_orgexamplemore.py\n\nListening on @0002c\nPing:  Test\n--- Start ---\nProgress: 0\nProgress: 10\nProgress: 20\nProgress: 30\nProgress: 40\nProgress: 50\nProgress: 60\nPing:  Test\nProgress: 70\nPing:  Test\nProgress: 80\nPing:  Test\nProgress: 90\nPing:  Test\nProgress: 100\nPing:  Test\n--- End ---  $ PYTHONPATH=$(pwd) python3 ./varlink/tests/test_orgexamplemore.py --varlink=\"unix:@test\" &\nListening on @test\n[1] 6434\n$ PYTHONPATH=$(pwd) python3 ./varlink/tests/test_orgexamplemore.py --client --varlink=\"unix:@test\"\nConnecting to unix:@test\n\nPing:  Test\n--- Start ---\nProgress: 0\nProgress: 10\nProgress: 20\nProgress: 30\nProgress: 40\nProgress: 50\nProgress: 60\nPing:  Test\nProgress: 70\nPing:  Test\nProgress: 80\nPing:  Test\nProgress: 90\nPing:  Test\nProgress: 100\nPing:  Test\n--- End ---\n$ fg\nPYTHONPATH=$(pwd) python3 ./varlink/tests/test_orgexamplemore.py --varlink=\"unix:@test\"\n^C  You can also start the clients and server with URLs following the  varlink URL standard .\nE.g.\n- unix:@anonuds\n- unix:/run/myserver/socketfile\n- tcp:127.0.0.1:12345\n- tcp:[::1]:12345",
            "title": "Examples"
        },
        {
            "location": "/#varlink-certification-server",
            "text": "$ PYTHONPATH=$(pwd) python3 ./varlink/tests/test_certification.py --varlink=tcp:127.0.0.1:12345",
            "title": "Varlink Certification Server"
        },
        {
            "location": "/#varlink-certification-client",
            "text": "$ PYTHONPATH=$(pwd) python3 ./varlink/tests/test_certification.py --varlink=tcp:127.0.0.1:12345 --client",
            "title": "Varlink Certification Client"
        },
        {
            "location": "/varlink-doc/",
            "text": "varlink\n\n\n\nAn implementation of the varlink protocol\n\n\nSee http://varlink.org for more information about the varlink protocol and interface definition files.\n\n\nFor service implementations use the Server() class, for client implementations use the Client() class.",
            "title": "varlink"
        },
        {
            "location": "/server/",
            "text": "varlink.server\n\n\n\nService\n\n\n\nService(self, vendor='', product='', version='', url='', interface_dir='.', namespaced=False)\n\n\n\n\nVarlink service server handler\n\n\nTo use the Service, a global object is instantiated:\n\n\n>>> service = Service(\n>>>    vendor='Red Hat',\n>>>    product='Manage System Accounts',\n>>>    version='1',\n>>>    interface_dir=os.path.dirname(__file__)\n>>> )\n\n\n\n\nFor the class implementing the methods of a specific varlink interface\na decorator is used:\n\n\n@service.interface('com.redhat.system.accounts')\nclass Accounts:\n[\u2026]\n\n\n\n\nThe varlink file corresponding to this interface is loaded from the 'interface_dir'\nspecified in the constructor of the Service. It has to end in '.varlink'.\n\n\nSplit the incoming stream for every null byte and feed it to the service.handle()\nfunction. Write any message returned from this generator function to the output stream.\n\n\nfor outgoing_message in service.handle(incoming_message):\n    connection.write(outgoing_message)\n\n\n\n\nor see, how the \nRequestHandler\n handles the Service object.\n\n\nNote: varlink only handles one method call at a time on one connection.\n\n\nGetInfo\n\n\n\nService.GetInfo(self)\n\n\n\n\nThe standardized org.varlink.service.GetInfo() varlink method.\n\nGetInterfaceDescription\n\n\nService.GetInterfaceDescription(self, interface)\n\n\n\n\nThe standardized org.varlink.service.GetInterfaceDescription() varlink method.\n\nhandle\n\n\nService.handle(self, message, _server=None, _request=None)\n\n\n\n\nThis generator function handles any incoming message. Write any returned bytes to the output stream.\n\n\nfor outgoing_message in service.handle(incoming_message):\n    connection.write(outgoing_message)\n\n\nRequestHandler\n\n\n\nRequestHandler(self, request, client_address, server)\n\n\n\n\nVarlink request handler\n\n\nTo use as an argument for the VarlinkServer constructor.\nInstantiate your own class and set the class variable service to your global varlink.Service object.\n\n\nServer\n\n\n\nServer(self, server_address, RequestHandlerClass, bind_and_activate=True)\n\n\n\n\nServer\n\n\nThe same as the standard socketserver.TCPServer, to initialize with a subclass of RequestHandler.\n\n\n>>> import varlink\n>>> import os\n>>>\n>>> service = varlink.Service(vendor='Example', product='Examples', version='1', url='http://example.com',\n>>>    interface_dir=os.path.dirname(__file__))\n>>>\n>>> class ServiceRequestHandler(varlink.RequestHandler):\n>>>    service = service\n>>>\n>>> @service.interface('com.example.service')\n>>> class Example:\n>>>    # com.example.service method implementation here \u2026\n>>>    pass\n>>>\n>>> server = varlink.ThreadingServer(sys.argv[1][10:], ServiceRequestHandler)\n>>> server.serve_forever()\n\n\n\n\naddress_family\n\n\n\nAn enumeration.\n\nsocket_type\n\n\nAn enumeration.\n\nrequest_queue_size\n\n\nint(x=0) -> integer\nint(x, base=10) -> integer\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.\nint\n().  For floating point\nnumbers, this truncates towards zero.\n\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n\n\n\n\n\n\n\n\nint('0b100', base=0)\n4\n\nallow_reuse_address\n\n\n\n\n\n\n\n\nbool(x) -> bool\n\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.\n\nserver_bind\n\n\nServer.server_bind(self)\n\n\n\n\nCalled by constructor to bind the socket.\n\n\nMay be overridden.\n\n\nserver_activate\n\n\n\nServer.server_activate(self)\n\n\n\n\nCalled by constructor to activate the server.\n\n\nMay be overridden.\n\n\nserver_close\n\n\n\nServer.server_close(self)\n\n\n\n\nCalled to clean-up the server.\n\n\nMay be overridden.\n\n\nfileno\n\n\n\nServer.fileno(self)\n\n\n\n\nReturn socket file number.\n\n\nInterface required by selector.\n\n\nget_request\n\n\n\nServer.get_request(self)\n\n\n\n\nGet the request and client address from the socket.\n\n\nMay be overridden.\n\n\nshutdown_request\n\n\n\nServer.shutdown_request(self, request)\n\n\n\n\nCalled to shutdown and close an individual request.\n\nclose_request\n\n\nServer.close_request(self, request)\n\n\n\n\nCalled to clean up an individual request.",
            "title": "server"
        },
        {
            "location": "/client/",
            "text": "varlink.client\n\n\n\nClientInterfaceHandler\n\n\n\nClientInterfaceHandler(self, interface, namespaced=False)\n\n\n\n\nBase class for varlink client, which wraps varlink methods of an interface to the class\n\nclose\n\n\nClientInterfaceHandler.close(self)\n\n\n\n\nTo be implemented.\n\nSimpleClientInterfaceHandler\n\n\nSimpleClientInterfaceHandler(self, interface, file_or_socket, namespaced=False)\n\n\n\n\nA varlink client for an interface doing send/write and receive/read on a socket or file stream\n\nClient\n\n\nClient(self, address=None, resolve_interface=None, resolver=None)\n\n\n\n\nVarlink client class.\n\n\n>>> with varlink.Client(\"unix:/run/org.example.ping\") as client, client.open('org.example.ping') as connection:\n>>>     assert con1.Ping(\"Test\")[\"pong\"] == \"Test\"\n\n\n\n\nIf the varlink resolver is running:\n\n\n>>> client = varlink.Client(resolve_interface='com.redhat.logging')\n>>> print(client.get_interfaces()['com.redhat.logging'].get_description())\n# Query and monitor the log messages of a system.\ninterface com.redhat.logging\n\ntype Entry (cursor: string, time: string, message: string, process: string, priority: string)\n\n# Monitor the log. Returns the @initial_lines most recent entries in the\n# first reply and then continuously replies when new entries are available.\nmethod Monitor(initial_lines: int) -> (entries: Entry[])\n>>> connection = client.open(\"com.redhat.logging\")\n\n\n\n\nconnection now holds an object with all the varlink methods available.\n\n\nDo varlink method call with varlink arguments and a\nsingle varlink return structure wrapped in a namespace class:\n\n\n>>> ret = connection.Monitor(initial_lines=1)\n>>> ret\nnamespace(entries=[namespace(cursor='s=[\u2026]',\n   message=\"req:1 'dhcp4-change' [wlp3s0][\u2026]\", priority='critical',\n   process='nm-dispatcher', time='2018-01-29 12:19:59Z')])\n>>> ret.entries[0].process\n'nm-dispatcher'\n\n\n\n\nDo varlink method call with varlink arguments and a\nmultiple return values in monitor mode, using the \"_more\" keyword:\n\n\n>>> for m in connection.Monitor(_more=True):\n>>>     for e in m.entries:\n>>>         print(\"%s: %s\" % (e.time, e.message))\n2018-01-29 12:19:59Z: [system] Activating via systemd: service name='[\u2026]\n2018-01-29 12:19:59Z: Starting Network Manager Script Dispatcher Service...\n2018-01-29 12:19:59Z: bound to 10.200.159.150 -- renewal in 1423 seconds.\n2018-01-29 12:19:59Z: [system] Successfully activated service 'org.freedesktop.nm_dispatcher'\n2018-01-29 12:19:59Z: Started Network Manager Script Dispatcher Service.\n2018-01-29 12:19:59Z: req:1 'dhcp4-change' [wlp3s0]: new request (6 scripts)\n2018-01-29 12:19:59Z: req:1 'dhcp4-change' [wlp3s0]: start running ordered scripts...\n\n\n\n\n\"_more\" is special to this python varlink binding. If \"_more=True\", then the method call does\nnot return a normal namespace wrapped varlink return value, but a generator,\nwhich yields the return values and waits (blocks) for the service to return more return values\nin the generator's .\nnext\n() call.\n\n\nSimpleClientInterfaceHandler\n\n\n\nClient.SimpleClientInterfaceHandler(self, interface, file_or_socket, namespaced=False)\n\n\n\n\nA varlink client for an interface doing send/write and receive/read on a socket or file stream\n\nopen\n\n\nClient.open(self, interface_name, namespaced=False)\n\n\n\n\nOpen a new connection and get a client interface handle with the varlink methods installed.\n\n\nArguments:\ninterface_name -- an interface name, which the service this client object is\n                  connected to, provides.\n\n\nExceptions:\nInterfaceNotFound -- if the interface is not found\nanything socket.connect() throws\n\n\nget_interfaces\n\n\n\nClient.get_interfaces(self)\n\n\n\n\nReturns the a list of Interface objects the service implements.\n\nadd_interface\n\n\nClient.add_interface(self, interface)\n\n\n\n\nManually add or overwrite an interface definition from an Interface object.\n\n\nArgument:\ninterface - an Interface() object",
            "title": "client"
        },
        {
            "location": "/error/",
            "text": "varlink.error\n\n\n\nVarlinkError\n\n\n\nVarlinkError(self, message, namespaced=False)\n\n\n\n\nThe base class for varlink error exceptions\n\nnew\n\n\nVarlinkError.new(message, namespaced=False)\n\n\n\n\nerror\n\n\n\nVarlinkError.error(self)\n\n\n\n\nreturns the exception varlink error name\n\nparameters\n\n\nVarlinkError.parameters(self, namespaced=False)\n\n\n\n\nreturns the exception varlink error parameters\n\nInterfaceNotFound\n\n\nInterfaceNotFound(self, interface)\n\n\n\n\nThe standardized varlink InterfaceNotFound error as a python exception\n\nnew\n\n\nInterfaceNotFound.new(message, namespaced=False)\n\n\n\n\nMethodNotFound\n\n\n\nMethodNotFound(self, method)\n\n\n\n\nThe standardized varlink MethodNotFound error as a python exception\n\nnew\n\n\nMethodNotFound.new(message, namespaced=False)\n\n\n\n\nMethodNotImplemented\n\n\n\nMethodNotImplemented(self, method)\n\n\n\n\nThe standardized varlink MethodNotImplemented error as a python exception\n\nnew\n\n\nMethodNotImplemented.new(message, namespaced=False)\n\n\n\n\nInvalidParameter\n\n\n\nInvalidParameter(self, name)\n\n\n\n\nThe standardized varlink InvalidParameter error as a python exception\n\nnew\n\n\nInvalidParameter.new(message, namespaced=False)",
            "title": "error"
        }
    ]
}